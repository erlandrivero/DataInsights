import pandas as pd
from typing import Dict, Any, List
import plotly.graph_objects as go
from datetime import datetime

class ReportGenerator:
    """Handles business report generation."""
    
    @staticmethod
    def generate_executive_summary(df: pd.DataFrame, profile: Dict[str, Any], insights: str) -> str:
        """Generate executive summary section."""
        summary = f"""
## Executive Summary

**Report Generated:** {datetime.now().strftime('%B %d, %Y at %I:%M %p')}

### Dataset Overview
This report analyzes a dataset containing **{profile['basic_info']['rows']:,} records** across **{profile['basic_info']['columns']} variables**. 

### Key Findings
{insights}

### Data Quality Assessment
- **Missing Data:** {profile['missing_data']['missing_percentage']} of values are missing
- **Duplicate Records:** {profile['basic_info']['duplicates']} duplicate rows identified
- **Data Completeness:** {100 - float(profile['missing_data']['missing_percentage'].rstrip('%')):.1f}% complete

### Recommendations
Based on the analysis, we recommend:
1. Address missing data in critical columns
2. Remove or investigate duplicate records
3. Validate data types and formats
4. Consider additional feature engineering for predictive modeling
"""
        return summary
    
    @staticmethod
    def generate_data_profile_section(profile: Dict[str, Any]) -> str:
        """Generate data profile section."""
        section = """
## Data Profile

### Column Information

| Column | Type | Missing | Unique Values |
|--------|------|---------|---------------|
"""
        for col in profile['column_info']:
            section += f"| {col['name']} | {col['dtype']} | {col['missing_pct']} | {col['unique']} |\n"
        
        return section
    
    @staticmethod
    def generate_quality_issues_section(issues: List[Dict[str, Any]]) -> str:
        """Generate data quality issues section."""
        if not issues:
            return """
## Data Quality Assessment

âœ… **No significant data quality issues detected.**

The dataset appears to be well-maintained with:
- No excessive missing values
- No duplicate records
- Appropriate data types
- Reasonable value distributions
"""
        
        section = """
## Data Quality Assessment

The following data quality issues were identified:

"""
        for issue in issues:
            severity_emoji = {'High': 'ðŸ”´', 'Medium': 'ðŸŸ¡', 'Low': 'ðŸŸ¢'}
            section += f"""
### {severity_emoji[issue['severity']]} {issue['type']} - {issue['column']}
**Severity:** {issue['severity']}  
**Description:** {issue['description']}

"""
        return section
    
    @staticmethod
    def generate_recommendations_section(suggestions: List[Dict[str, Any]]) -> str:
        """Generate recommendations section."""
        if not suggestions:
            return """
## Recommendations

The dataset is in good condition. Consider:
1. Regular data quality monitoring
2. Documenting data collection processes
3. Implementing data validation rules
4. Creating automated quality checks
"""
        
        section = """
## Recommendations

Based on the analysis, we recommend the following actions:

"""
        for i, suggestion in enumerate(suggestions, 1):
            section += f"""
### {i}. {suggestion.get('issue', 'General')}

**Action:** {suggestion.get('suggestion', 'N/A')}

**Rationale:** {suggestion.get('reason', 'N/A')}

**Implementation:**
```python
{suggestion.get('code', '# No code provided')}
```

"""
        return section
    
    @staticmethod
    def generate_full_report(
        df: pd.DataFrame,
        profile: Dict[str, Any],
        issues: List[Dict[str, Any]],
        insights: str,
        suggestions: List[Dict[str, Any]]
    ) -> str:
        """Generate complete business report."""
        report = f"""
# DataInsight AI - Business Intelligence Report

---

{ReportGenerator.generate_executive_summary(df, profile, insights)}

---

{ReportGenerator.generate_data_profile_section(profile)}

---

{ReportGenerator.generate_quality_issues_section(issues)}

---

{ReportGenerator.generate_recommendations_section(suggestions)}

---

## Conclusion

This analysis provides a comprehensive overview of the dataset's structure, quality, and potential areas for improvement. 
The recommendations outlined above should be prioritized based on business requirements and data usage scenarios.

For questions or additional analysis, please contact the data team.

---

**Report Generated by:** DataInsight AI  
**Date:** {datetime.now().strftime('%B %d, %Y')}  
**Version:** 1.0
"""
        return report
